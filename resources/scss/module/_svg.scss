//Pass in width / height without any length unit specifier (so we don't have to do sill strip unit wackiness!), and
//this will determine appropraite ratio for padding hack and deliver the conainter code.
//Defaults to, essentially, a box 1:1. Ex. if you had W100 and H200 you'll get a `padding-bottom:200%`
//Preferably, put something like `viewBox="0 0 N N" preserveAspectRatio="xMinYMin meet"` on your SVG root element
@mixin svg-responsive ($width: 1, $height: 1, $container-namespace: ".svg-container") {
  $padding-bottom: percentage($height/$width);
  #{$container-namespace} {
    display: inline-block;
    position: relative;
    height: 0;
    width: 100%;
    padding: 0;
    padding-bottom: $padding-bottom;
    vertical-align: middle;
    overflow: hidden;
  }
}

//This is a call to the mixin with no args and I'll get `.svg-container {...padding hack code...}`
//If you want another namespace and/or w/h ratio use the parameters
@include svg-responsive ();

@include svg-responsive (1, 2, '.svg-container-2x-height');

//You have to write this once in your code...just apply this class on all your SVGs and absolutely position them top left inline block:
.svg {
  display: inline-block;
  position: absolute;
  top: 0;
  left: 0;
}



//Doug Schepers timeline slide tweaked
.svg-container.rise-and-fall {
	padding-bottom: 46.15384615%;
	.svg {
		.heading, .subheading, .bullet, .item {
		  font-family: inherit;
		}
		.timepoint,
		.number-using {
			fill: gold;
		}
		.number-using {
		  font-size: .875em;
		}
		.timepoint {
			font-size: .5625em;
		  > tspan {
		  	fill: white;
		  }
		}
		.axis-labels {
			fill: white;
			font-size: .75em;
		}
		.title, .heading, h1, h2, h3 {
		  fill: gold;
		  font-size: 2em;
		  font-weight: bold;
		}
	}
}
